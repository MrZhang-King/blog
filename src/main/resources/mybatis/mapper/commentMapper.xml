<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- comment -->
<mapper namespace="com.zb.blog.mapper.CommentMapper">
    <!-- This code was generated by TableGo tools, mark 1 begin. -->
    <!-- 字段映射 -->
    <resultMap id="commentMap" type="comment">
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="comment_person_name" property="commentPersonName" jdbcType="VARCHAR" />
        <result column="comment_person_id" property="commentPersonId" jdbcType="INTEGER" />
        <result column="blog_id" property="blogId" jdbcType="INTEGER" />
        <result column="blog_title" property="blogTitle" jdbcType="VARCHAR" />
        <result column="publish_time" property="publishTime" jdbcType="TIMESTAMP" />
        <result column="blogger_state" property="bloggerState" jdbcType="VARCHAR" />
        <result column="comment_state" property="commentState" jdbcType="VARCHAR" />
        <result column="content" property="content" jdbcType="BLOB" typeHandler="com.zb.blog.handler.BlobToStringTypeHandler" />
        <result column="parent_id" property="parentId" jdbcType="INTEGER" />
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    </resultMap>
    <!-- This code was generated by TableGo tools, mark 1 end. -->
    
    <!-- This code was generated by TableGo tools, mark 2 begin. -->
    <!-- 表查询字段 -->
    <sql id="allColumns">
        c.id, c.comment_person_name, c.comment_person_id, c.blog_id, c.blog_title, c.publish_time, c.blogger_state, c.comment_state, c.content,
        c.parent_id, c.create_time
    </sql>
    <!-- This code was generated by TableGo tools, mark 2 end. -->
    
    <!-- 查询所有数据 -->
    <select id="findCommentAll" resultMap="commentMap">
        SELECT
        <include refid="allColumns" />
        FROM comment c
    </select>
    
    <!-- 根据条件参数查询数据列表 -->
    <select id="findCommentByCondition" resultMap="commentMap" parameterType="map">
        SELECT
        <include refid="allColumns" />
        FROM comment c WHERE 1 = 1
        <if test="commentPersonName != null and commentPersonName != ''">
            AND c.comment_person_name LIKE CONCAT('%', #{commentPersonName}, '%')
        </if>
        <if test="commentPersonId != null">
            AND c.id = #{commentPersonId}
        </if>
        <if test="blogId != null">
            AND c.blog_id = #{blogId}
        </if>
        <if test="blogTitle != null and blogTitle != ''">
            AND c.blog_title = #{blogTitle}
        </if>
        <if test="publishTime != null">
            AND c.publish_time = #{publishTime}
        </if>
        <if test="bloggerState != null">
            AND c.blogger_state = #{bloggerState}
        </if>
        <if test="commentState != null">
            AND c.comment_state = #{commentState}
        </if>
        <if test="content != null">
            AND c.content = #{content}
        </if>
        <if test="parentId != null">
            AND c.parent_id = #{parentId}
        </if>
        <if test="createTime != null">
            AND c.create_time = #{createTime}
        </if>
    </select>
    
    <!-- 根据主键查询数据 -->
    <select id="findCommentByIds" resultMap="commentMap" parameterType="list">
        SELECT
        <include refid="allColumns" />
        FROM comment c WHERE c.id IN
        <foreach collection="list" index="index" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>
    
    <!-- 插入数据 -->
    <insert id="insertComment" parameterType="map">
        INSERT INTO comment (
            id, comment_person_name, comment_person_id, blog_id, blog_title, publish_time, blogger_state, comment_state, content,
            parent_id, create_time
        ) VALUES (
            #{id},
            #{commentPersonName},
            #{commentPersonId},
            #{blogId},
             #{blogTitle},
            #{publishTime},
            #{bloggerState},
            #{commentState},
            #{content},
            #{parentId},
            #{createTime}
        )
    </insert>
    
    <!-- 批量插入数据 -->
    <insert id="insertComments" parameterType="list">
        INSERT INTO comment (
            id, comment_person_name, comment_person_id, blog_id, blog_title, publish_time, blogger_state, comment_state, content,
            parent_id, create_time
        ) VALUES
        <foreach collection="list" index="index" item="item" separator=",">
            (
                #{item.id},
                #{item.commentPersonName},
                #{item.commentPersonId},
                #{item.blogId},
                #{item.blogTitle},
                #{item.publishTime},
                #{item.bloggerState},
                #{item.commentState},
                #{item.content},
                #{item.parentId},
                #{item.createTime}
            )
        </foreach>
    </insert>
    
    <!-- 修改数据 -->
    <update id="updateComment" parameterType="map">
        UPDATE comment
        <set>
            <if test="commentPersonName != null">
                comment_person_name = #{commentPersonName},
            </if>
            <if test="commentPersonId != null">
                comment_person_id = #{commentPersonId},
            </if>
            <if test="blogId != null">
                blog_id = #{blogId},
            </if>
            <if test="blogTitle != null">
                blog_title = #{blogTitle},
            </if>
            <if test="publishTime != null">
                publish_time = #{publishTime},
            </if>
            <if test="bloggerState != null">
                blogger_state = #{bloggerState},
            </if>
            <if test="commentState != null">
                comment_state = #{commentState},
            </if>
            <if test="content != null">
                content = #{content},
            </if>
            <if test="parentId != null">
                parent_id = #{parentId},
            </if>
            <if test="createTime != null">
                create_time = #{createTime}
            </if>
        </set>
        WHERE id = #{id}
    </update>
    
    <!-- 批量修改数据 -->
    <update id="updateComments" parameterType="list">
        <foreach collection="list" index="index" item="item" separator=";">
            UPDATE comment
            <set>
                <if test="item.commentPersonName != null">
                    comment_person_name = #{item.commentPersonName},
                </if>
                <if test="item.commentPersonId != null">
                    comment_person_id = #{item.commentPersonId},
                </if>
                <if test="item.blogId != null">
                    blog_id = #{item.blogId},
                </if>
                <if test="blogTitle != null">
                    blog_title = #{item.blogTitle},
                </if>
                <if test="item.publishTime != null">
                    publish_time = #{item.publishTime},
                </if>
                <if test="item.bloggerState != null">
                    blogger_state = #{item.bloggerState},
                </if>
                <if test="item.commentState != null">
                    comment_state = #{item.commentState},
                </if>
                <if test="item.content != null">
                    content = #{item.content},
                </if>
                <if test="item.parentId != null">
                    parent_id = #{item.parentId},
                </if>
                <if test="item.createTime != null">
                    create_time = #{item.createTime}
                </if>
            </set>
            WHERE id = #{item.id}
        </foreach>
    </update>
    
    <!-- 根据主键删除数据 -->
    <delete id="deleteCommentById" parameterType="int">
        DELETE FROM comment WHERE id = #{id}
    </delete>
    
    <!-- 根据主键批量删除数据 -->
    <delete id="deleteCommentByIds" parameterType="list">
        DELETE FROM comment WHERE id IN
        <foreach collection="list" index="index" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
</mapper>